#include <DHT.h>



#include <max6675.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 5"
  https://create.arduino.cc/cloud/things/f808a87c-fe38-4ea7-b445-a4675f4c27a1 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float calidad;
  float humedad;
  float temp;
  float temp2;
  int longitud;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#define Sensor 1
#include "thingProperties.h"
#define DHTPIN 16
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

int thermoDO = 33;
int thermoCS = 34;
int thermoCLK = 36;
MAX6675 thermocouple(thermoCLK, thermoCS, thermoDO);
 const int Trigger = 5;   //Pin digital 2 para el Trigger del sensor
const int Echo = 4;   //Pin digital 3 para el Echo del sensor 
const int pinBuzzer = hs6;
int frecuencia = 2000;
int duracion = 100;

void Task1(void *pvParameters);
void Task2(void *pvParameters);

typedef struct{
  float Longu;
  float temperatura;
}ValueQueue;
ValueQueue value;
QueueHandle_t queue;
SemaphoreHandle_t xSemaphore;

// FunciÃ³n para delay en microsegundos usando FreeRTOS
void delayMicrosecondsRTOS(uint32_t us) {
  const uint32_t tickCount = (us + portTICK_PERIOD_MS * 1000 - 1) / (portTICK_PERIOD_MS * 1000);
  if (tickCount > 0) {
    vTaskDelay(tickCount);
  } else {
    ets_delay_us(us);  // Usar la funciÃ³n del SDK de ESP-IDF para retardos cortos
  }
}


void setup() {
  Serial.begin(9600);
  dht.begin();
  pinMode(Trigger, OUTPUT);
  pinMode(Echo, INPUT);
  digitalWrite(Trigger, LOW);
  delay(1500);
  tone(pinBuzzer, frecuencia, duracion);

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  queue = xQueueCreate(10, sizeof(ValueQueue));
  xSemaphore = xSemaphoreCreateBinary();

  xTaskCreatePinnedToCore(Task1, "Task1", 10000, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(Task2, "Task2", 10000, NULL, 1, NULL, 1);
}

void loop() {
  
  
  
}

void Task1(void *pvParameters) {
  while (true) {
    long t;
    long d;
    digitalWrite(Trigger, HIGH);
    delayMicrosecondsRTOS(10);
    digitalWrite(Trigger, LOW);
    t = pulseIn(Echo, HIGH);
    d = t / 59;
    if (d > 100) d = 0;
    longitud = d;
    float analog = analogRead(Sensor);
    temp2 = thermocouple.readCelsius();
    temp = dht.readTemperature();
    humedad = dht.readHumidity();
    calidad = (analog / 4096) * 100;
    ArduinoCloud.update();
    
    ValueQueue value;
    value.Longu = longitud;
    value.temperatura = temp;
  
    if (xQueueSend(queue, &value, portMAX_DELAY) == pdPASS) {
      xSemaphoreGive(xSemaphore);
    }
    
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

// ImplementaciÃ³n de la tarea 2
void Task2(void *pvParameters) {
  ValueQueue value;
  while (true) {
    if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
      if (xQueueReceive(queue, &value, portMAX_DELAY) == pdTRUE) {
        Serial.println("Task2 is running on core " + String(xPortGetCoreID()));
        Serial.println("Received Longu: " + String(value.Longu));
        Serial.println("Received Temperature: " + String(value.temperatura));
      }
    }
    vTaskDelay(2000 / portTICK_PERIOD_MS);
  }
}








/*
  Since Longitud is READ_WRITE variable, onLongitudChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLongitudChange()  {
  // Add your code here to act upon Longitud change
}
